import { Schema, model } from "mongoose";
import { TProduct } from "./product.interface";

// create schema for product
const productSchema = new Schema<TProduct>({
  name: {
    type: String,
    required: [true, "Name is required"],
    unique: true,
    trim: true,
  },
  img_url: {
    type: String,
    required: [true, "Image URL is required"],
    trim: true,
  },
  brand: {
    type: String,
    required: [true, "Brand is required"],
    trim: true,
  },
  stock_quantity: {
    type: Number,
    required: [true, "Stock quantity is required"],
    min: [0, "Stock quantity cannot be less than 0"],
  },
  price: {
    type: Number,
    required: [true, "Price is required"],
    min: [0, "Price cannot be less than 0"],
  },
  rating: {
    type: Number,
    required: [true, "Rating is required"],
    min: [0, "Rating cannot be less than 0"],
    max: [5, "Rating cannot be more than 5"],
  },
  description: {
    type: String,
    required: [true, "Description is required"],
  },
  isDeleted: {
    type: Boolean,
    default: false,
  },
});

// create model for product
export const ProductModel = model<TProduct>("Product", productSchema);

zod validation schema for this above model:

import { z } from "zod";

// Define the Product schema
const productValidationSchema = z.object({
  name: z
    .string()
    .min(1, "Name is required")
    .max(255, "Name cannot exceed 255 characters")
    .trim(),
  img_url: z.string().url("Image URL must be a valid URL"),
  brand: z
    .string()
    .min(1, "Brand is required")
    .max(255, "Brand cannot exceed 255 characters"),
  stock_quantity: z.number().min(0, "Stock quantity cannot be less than 0"),
  price: z.number().min(0, "Price cannot be less than 0"),
  rating: z
    .number()
    .min(0, "Rating cannot be less than 0")
    .max(5, "Rating cannot be more than 5"),
  description: z.string().min(1, "Description is required"),
  // quantity: z.number().default(0),
  isDeleted: z.boolean().default(false),
});

export { productValidationSchema };



follow this code structure and create controller and service function for the below routes:

skill routes:


project routes:


blog routes:
